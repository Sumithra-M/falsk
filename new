from flask import Flask, render_template, request
import tflite_runtime.interpreter as tflite
import numpy as np
from PIL import Image
import requests
import io

# Initialize Flask application
app = Flask(__name__)

# Load the TensorFlow Lite model
interpreter = tflite.Interpreter(model_path='/content/drive/MyDrive/bcarmulticlassificationcar_tfmodel_v214.tflite')
interpreter.allocate_tensors()

# Get the input and output details
input_index = interpreter.get_input_details()[0]['index']
output_index = interpreter.get_output_details()[0]['index']

# Define the function to load and preprocess the image
def load_and_preprocess_image(url, target_size=(600, 800)):
    response = requests.get(url)
    img = Image.open(io.BytesIO(response.content)).resize(target_size)
    X = (np.expand_dims(np.array(img), 0) / 255).astype(np.float32)
    return X

# Define the mapping from label index to class name
label_to_cls = {1: "crack", 2: "scratch", 3: "tire flat", 4: "dent", 5: "glass shatter", 6: "lamp broken"}

# Define route for home page
@app.route('/')
def home():
    return render_template('index.html')

# Define route for processing image
@app.route('/predict', methods=['POST'])
def predict():
    # Get URL of the image from the form
    url = request.form['image_url']

    # Load and preprocess the image
    X = load_and_preprocess_image(url)

    # Perform inference
    interpreter.set_tensor(input_index, X)
    interpreter.invoke()
    preds = interpreter.get_tensor(output_index)

    # Get the predicted class
    predicted_class_index = np.argmax(preds) + 1
    predicted_class_name = label_to_cls[predicted_class_index]

    # Return the predicted class
    return render_template('result.html', predicted_class=predicted_class_name)

if __name__ == '__main__':
    app.run(debug=True)
